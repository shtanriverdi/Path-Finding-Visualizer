// SÜHA TANRIVERDİ - 201611689
// CENG-344 Java - Section 1
// Path Finding Visualization Project
// Genesis Corporation™
// All Rights Reserved. 2020
package PathFindingVisualizer;

import java.awt.Color;
import java.awt.Graphics;
import java.awt.Panel;
import java.awt.event.MouseEvent;
import java.awt.event.MouseListener;
import java.awt.event.MouseMotionListener;
import java.util.LinkedList;
import java.util.Queue;
import java.util.Stack;
import java.util.concurrent.ThreadLocalRandom;
import javax.swing.JFrame;
import javax.swing.JOptionPane;
import javax.swing.JPanel;

public class PathFindingVisualizer extends javax.swing.JFrame {
	// Variables
	private int startX = -1;
	private int startY = -1;
	private int finishX = -1;
	private int finishY = -1;
	private int numberOfCells = 5;
	private int GLOBAL_DELAY = 5;
	private final int WIDTH = 1118;
	private final int HEIGHT = 778;
	private final int MAPSIZE = 778;
	private int CELLSIZE = MAPSIZE / numberOfCells;

	// Directions
	final Pair[] directions = new Pair[8];

	// Tools Button Active Status Array
	/*
		[0] -> START Button
		[1] -> FINISH Button
		[2] -> WALL Button
	 */
	private int tool = 2;

	// 2D Map Array
	Cell[][] map;

	// Grid (Window Size: [1118, 778])
	Map grid;

	// Algorithms
	Algorithms RunAlgorithm;
	String currentSelectedAlgorithm = "BFS";

	// Searching
	private boolean searching = false;
	private boolean isThreadStarted = false;

	// Colors
	Color wallColor = new Color(117, 59, 2);
	Color startColor = new Color(255, 51, 153);
	Color finishColor = new Color(51, 204, 255);
	Color visitedColor = new Color(187, 242, 78);
	Color finalPathColor = new Color(255, 153, 51);

	// Constructor
	public PathFindingVisualizer() {
		initComponents();

		directions[0] = new Pair(1, 0);
		directions[1] = new Pair(0, 1);
		directions[2] = new Pair(-1, 0);
		directions[3] = new Pair(0, -1);
		directions[4] = new Pair(1, 1);
		directions[5] = new Pair(-1, 1);
		directions[6] = new Pair(1, -1);
		directions[7] = new Pair(-1, -1);

		grid = new Map();
		grid.setBounds(0, 0, jPanel2.getHeight(), jPanel2.getHeight());
		initializeGrid();
		jPanel2.add(grid);
	}

	// Initializes the map from scratch
	public void initializeGrid() {
		finishX = -1;
		finishY = -1;
		startX = -1;
		startY = -1;
		map = new Cell[numberOfCells][numberOfCells];
		for (int x = 0; x < numberOfCells; x++) {
			for (int y = 0; y < numberOfCells; y++) {
				map[x][y] = new Cell(2, x, y);
			}
		}
	}

	// Updates the elements of the Grid
	public void updateGrid() {
		CELLSIZE = jPanel2.getHeight() / numberOfCells;
		grid.repaint();
	}

	// resets the grid
	public void resetGrid() {
		initializeGrid();
	}

	/**
	 * This method is called from within the constructor to initialize the form. WARNING: Do NOT modify this code. The content of this method is always regenerated by the Form Editor.
	 */
	@SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jDesktopPane1 = new javax.swing.JDesktopPane();
        jPanel1 = new javax.swing.JPanel();
        label1 = new java.awt.Label();
        jLayeredPane1 = new javax.swing.JLayeredPane();
        jButton1 = new javax.swing.JButton();
        jButton2 = new javax.swing.JButton();
        jButton3 = new javax.swing.JButton();
        jComboBox1 = new javax.swing.JComboBox<>();
        label2 = new java.awt.Label();
        slider = new javax.swing.JSlider();
        label3 = new java.awt.Label();
        gridSize = new javax.swing.JLabel();
        jLabel1 = new javax.swing.JLabel();
        jLabel2 = new javax.swing.JLabel();
        jRadioButton_AddStartButton = new javax.swing.JRadioButton();
        jRadioButton2_AddFinishButton = new javax.swing.JRadioButton();
        jRadioButton3_AddWallButton = new javax.swing.JRadioButton();
        label4 = new java.awt.Label();
        jPanel3 = new javax.swing.JPanel();
        jPanel4 = new javax.swing.JPanel();
        jPanel5 = new javax.swing.JPanel();
        label5 = new java.awt.Label();
        label6 = new java.awt.Label();
        label7 = new java.awt.Label();
        label8 = new java.awt.Label();
        jPanel6 = new javax.swing.JPanel();
        label9 = new java.awt.Label();
        jPanel7 = new javax.swing.JPanel();
        label10 = new java.awt.Label();
        jRadioButton3_AddRemoveButton1 = new javax.swing.JRadioButton();
        jSlider1 = new javax.swing.JSlider();
        label11 = new java.awt.Label();
        gridSize1 = new javax.swing.JLabel();
        jPanel2 = new javax.swing.JPanel();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setTitle("Pathfinding Visualization");
        setBackground(new java.awt.Color(255, 255, 255));
        setResizable(false);

        jPanel1.setBackground(new java.awt.Color(153, 153, 153));

        label1.setAlignment(java.awt.Label.CENTER);
        label1.setFont(new java.awt.Font("Microsoft YaHei UI", 1, 18)); // NOI18N
        label1.setText("Menu");

        javax.swing.GroupLayout jLayeredPane1Layout = new javax.swing.GroupLayout(jLayeredPane1);
        jLayeredPane1.setLayout(jLayeredPane1Layout);
        jLayeredPane1Layout.setHorizontalGroup(
            jLayeredPane1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 192, Short.MAX_VALUE)
        );
        jLayeredPane1Layout.setVerticalGroup(
            jLayeredPane1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 44, Short.MAX_VALUE)
        );

        jButton1.setFont(new java.awt.Font("Dialog", 1, 14)); // NOI18N
        jButton1.setText("Start Path Finding");
        jButton1.setToolTipText("Starts path finding process");
        jButton1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton1ActionPerformed(evt);
            }
        });

        jButton2.setFont(new java.awt.Font("Dialog", 1, 14)); // NOI18N
        jButton2.setText("Generate Random Map");
        jButton2.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton2ActionPerformed(evt);
            }
        });

        jButton3.setFont(new java.awt.Font("Dialog", 1, 14)); // NOI18N
        jButton3.setText("Clear Path");
        jButton3.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton3ActionPerformed(evt);
            }
        });

        jComboBox1.setFont(new java.awt.Font("Dialog", 1, 14)); // NOI18N
        jComboBox1.setMaximumRowCount(2);
        jComboBox1.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "BFS", "DFS" }));
        jComboBox1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jComboBox1ActionPerformed(evt);
            }
        });

        label2.setFont(new java.awt.Font("Dialog", 1, 14)); // NOI18N
        label2.setText("Select Algorithm");

        slider.setFont(new java.awt.Font("Dialog", 1, 14)); // NOI18N
        slider.setMajorTickSpacing(5);
        slider.setMaximum(30);
        slider.setMinimum(5);
        slider.setPaintLabels(true);
        slider.setPaintTicks(true);
        slider.setSnapToTicks(true);
        slider.setValue(5);
        slider.setAlignmentX(1.0F);
        slider.setAlignmentY(1.0F);
        slider.setCursor(new java.awt.Cursor(java.awt.Cursor.DEFAULT_CURSOR));
        slider.addChangeListener(new javax.swing.event.ChangeListener() {
            public void stateChanged(javax.swing.event.ChangeEvent evt) {
                sliderStateChanged(evt);
            }
        });

        label3.setFont(new java.awt.Font("Dialog", 1, 14)); // NOI18N
        label3.setText("Grid Size");

        gridSize.setFont(new java.awt.Font("Dialog", 1, 14)); // NOI18N
        gridSize.setForeground(new java.awt.Color(0, 0, 0));
        gridSize.setText(this.slider.getValue()+"x"+this.slider.getValue());

        jLabel1.setFont(new java.awt.Font("Arial Black", 0, 12)); // NOI18N
        jLabel1.setText("Genesis Corporation™ 2020");

        jLabel2.setFont(new java.awt.Font("Arial Black", 0, 12)); // NOI18N
        jLabel2.setText("All Rights Reserved.");

        jRadioButton_AddStartButton.setText("Add Start Point");
        jRadioButton_AddStartButton.addChangeListener(new javax.swing.event.ChangeListener() {
            public void stateChanged(javax.swing.event.ChangeEvent evt) {
                jRadioButton_AddStartButtonStateChanged(evt);
            }
        });
        jRadioButton_AddStartButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jRadioButton_AddStartButtonActionPerformed(evt);
            }
        });

        jRadioButton2_AddFinishButton.setText("Add Finish Point");
        jRadioButton2_AddFinishButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jRadioButton2_AddFinishButtonActionPerformed(evt);
            }
        });

        jRadioButton3_AddWallButton.setText("Add Wall");
        jRadioButton3_AddWallButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jRadioButton3_AddWallButtonActionPerformed(evt);
            }
        });

        label4.setFont(new java.awt.Font("Dialog", 1, 14)); // NOI18N
        label4.setText("Finish Point");

        jPanel3.setBackground(new java.awt.Color(255, 51, 153));

        javax.swing.GroupLayout jPanel3Layout = new javax.swing.GroupLayout(jPanel3);
        jPanel3.setLayout(jPanel3Layout);
        jPanel3Layout.setHorizontalGroup(
            jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 0, Short.MAX_VALUE)
        );
        jPanel3Layout.setVerticalGroup(
            jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 20, Short.MAX_VALUE)
        );

        jPanel4.setBackground(new java.awt.Color(51, 204, 255));

        javax.swing.GroupLayout jPanel4Layout = new javax.swing.GroupLayout(jPanel4);
        jPanel4.setLayout(jPanel4Layout);
        jPanel4Layout.setHorizontalGroup(
            jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 0, Short.MAX_VALUE)
        );
        jPanel4Layout.setVerticalGroup(
            jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 20, Short.MAX_VALUE)
        );

        jPanel5.setBackground(new java.awt.Color(117, 59, 2));
        jPanel5.setPreferredSize(new java.awt.Dimension(0, 20));

        javax.swing.GroupLayout jPanel5Layout = new javax.swing.GroupLayout(jPanel5);
        jPanel5.setLayout(jPanel5Layout);
        jPanel5Layout.setHorizontalGroup(
            jPanel5Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 0, Short.MAX_VALUE)
        );
        jPanel5Layout.setVerticalGroup(
            jPanel5Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 20, Short.MAX_VALUE)
        );

        label5.setFont(new java.awt.Font("Dialog", 1, 14)); // NOI18N
        label5.setText("Select Tool");

        label6.setFont(new java.awt.Font("Dialog", 1, 14)); // NOI18N
        label6.setText("Information");

        label7.setFont(new java.awt.Font("Dialog", 1, 14)); // NOI18N
        label7.setText("Start Point");

        label8.setFont(new java.awt.Font("Dialog", 1, 14)); // NOI18N
        label8.setText(" Visited Cell");

        jPanel6.setBackground(new java.awt.Color(187, 242, 78));
        jPanel6.setPreferredSize(new java.awt.Dimension(0, 20));

        javax.swing.GroupLayout jPanel6Layout = new javax.swing.GroupLayout(jPanel6);
        jPanel6.setLayout(jPanel6Layout);
        jPanel6Layout.setHorizontalGroup(
            jPanel6Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 41, Short.MAX_VALUE)
        );
        jPanel6Layout.setVerticalGroup(
            jPanel6Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 20, Short.MAX_VALUE)
        );

        label9.setFont(new java.awt.Font("Dialog", 1, 14)); // NOI18N
        label9.setText("Wall (Obstacle)");

        jPanel7.setBackground(new java.awt.Color(255, 153, 51));
        jPanel7.setToolTipText("");
        jPanel7.setPreferredSize(new java.awt.Dimension(0, 20));

        javax.swing.GroupLayout jPanel7Layout = new javax.swing.GroupLayout(jPanel7);
        jPanel7.setLayout(jPanel7Layout);
        jPanel7Layout.setHorizontalGroup(
            jPanel7Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 41, Short.MAX_VALUE)
        );
        jPanel7Layout.setVerticalGroup(
            jPanel7Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 20, Short.MAX_VALUE)
        );

        label10.setFont(new java.awt.Font("Dialog", 1, 14)); // NOI18N
        label10.setText("Final Path");

        jRadioButton3_AddRemoveButton1.setText("Remove Wall");
        jRadioButton3_AddRemoveButton1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jRadioButton3_AddRemoveButton1ActionPerformed(evt);
            }
        });

        jSlider1.setMajorTickSpacing(5);
        jSlider1.setMaximum(50);
        jSlider1.setMinimum(5);
        jSlider1.setMinorTickSpacing(5);
        jSlider1.setPaintLabels(true);
        jSlider1.setPaintTicks(true);
        jSlider1.setSnapToTicks(true);
        jSlider1.setToolTipText("");
        jSlider1.setValue(5);
        jSlider1.addChangeListener(new javax.swing.event.ChangeListener() {
            public void stateChanged(javax.swing.event.ChangeEvent evt) {
                jSlider1StateChanged(evt);
            }
        });

        label11.setFont(new java.awt.Font("Dialog", 1, 14)); // NOI18N
        label11.setText("Delay");

        gridSize1.setFont(new java.awt.Font("Dialog", 1, 14)); // NOI18N
        gridSize1.setForeground(new java.awt.Color(0, 0, 0));
        gridSize1.setText("5");

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jLabel2, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(jLabel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addGap(42, 42, 42)
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                                .addComponent(label2, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addComponent(jComboBox1, 0, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                .addComponent(slider, javax.swing.GroupLayout.PREFERRED_SIZE, 192, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addGroup(jPanel1Layout.createSequentialGroup()
                                .addComponent(label3, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGap(36, 36, 36)
                                .addComponent(gridSize, javax.swing.GroupLayout.PREFERRED_SIZE, 106, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                                .addComponent(jButton1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                .addComponent(jButton2, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                .addComponent(jButton3, javax.swing.GroupLayout.PREFERRED_SIZE, 192, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addComponent(label6, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addGroup(jPanel1Layout.createSequentialGroup()
                                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                                    .addComponent(jPanel4, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                    .addComponent(jPanel6, javax.swing.GroupLayout.DEFAULT_SIZE, 41, Short.MAX_VALUE)
                                    .addComponent(jPanel3, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                    .addComponent(jPanel5, javax.swing.GroupLayout.DEFAULT_SIZE, 41, Short.MAX_VALUE)
                                    .addComponent(jPanel7, javax.swing.GroupLayout.DEFAULT_SIZE, 41, Short.MAX_VALUE))
                                .addGap(20, 20, 20)
                                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(label7, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addComponent(label4, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addComponent(label8, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addComponent(label9, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addComponent(label10, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)))
                            .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                                .addGroup(javax.swing.GroupLayout.Alignment.LEADING, jPanel1Layout.createSequentialGroup()
                                    .addComponent(label11, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                    .addComponent(gridSize1, javax.swing.GroupLayout.PREFERRED_SIZE, 28, javax.swing.GroupLayout.PREFERRED_SIZE))
                                .addComponent(jSlider1, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addComponent(label5, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jRadioButton_AddStartButton, javax.swing.GroupLayout.PREFERRED_SIZE, 133, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jRadioButton2_AddFinishButton, javax.swing.GroupLayout.PREFERRED_SIZE, 133, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jRadioButton3_AddWallButton, javax.swing.GroupLayout.PREFERRED_SIZE, 133, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jRadioButton3_AddRemoveButton1, javax.swing.GroupLayout.PREFERRED_SIZE, 133, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGap(145, 145, 145)
                        .addComponent(jLayeredPane1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addContainerGap())
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addComponent(label1, javax.swing.GroupLayout.PREFERRED_SIZE, 279, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(0, 0, Short.MAX_VALUE))))
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(label1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jLayeredPane1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addComponent(jButton1)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jButton2)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jButton3)))
                .addGap(2, 2, 2)
                .addComponent(label2, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(1, 1, 1)
                .addComponent(jComboBox1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(9, 9, 9)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(label3, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(gridSize))
                .addGap(2, 2, 2)
                .addComponent(slider, javax.swing.GroupLayout.PREFERRED_SIZE, 46, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(label5, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(2, 2, 2)
                .addComponent(jRadioButton_AddStartButton)
                .addGap(4, 4, 4)
                .addComponent(jRadioButton2_AddFinishButton)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jRadioButton3_AddWallButton)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jRadioButton3_AddRemoveButton1)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addComponent(label11, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(gridSize1))
                .addGap(4, 4, 4)
                .addComponent(jSlider1, javax.swing.GroupLayout.PREFERRED_SIZE, 46, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(label6, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(1, 1, 1)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jPanel3, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(label7, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(13, 13, 13)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jPanel4, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(label4, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(13, 13, 13)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jPanel5, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(label9, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(13, 13, 13)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jPanel6, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(label8, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jPanel7, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(label10, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jLabel1)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jLabel2)
                .addContainerGap())
        );

        jDesktopPane1.setLayer(jPanel1, javax.swing.JLayeredPane.DEFAULT_LAYER);

        javax.swing.GroupLayout jDesktopPane1Layout = new javax.swing.GroupLayout(jDesktopPane1);
        jDesktopPane1.setLayout(jDesktopPane1Layout);
        jDesktopPane1Layout.setHorizontalGroup(
            jDesktopPane1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jDesktopPane1Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jPanel1, javax.swing.GroupLayout.PREFERRED_SIZE, 300, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        jDesktopPane1Layout.setVerticalGroup(
            jDesktopPane1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jDesktopPane1Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addContainerGap())
        );

        jPanel2.setBackground(new java.awt.Color(204, 255, 204));
        jPanel2.setPreferredSize(new java.awt.Dimension(788, 788));

        javax.swing.GroupLayout jPanel2Layout = new javax.swing.GroupLayout(jPanel2);
        jPanel2.setLayout(jPanel2Layout);
        jPanel2Layout.setHorizontalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 788, Short.MAX_VALUE)
        );
        jPanel2Layout.setVerticalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 0, Short.MAX_VALUE)
        );

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jDesktopPane1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jPanel2, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addComponent(jPanel2, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(jDesktopPane1))
                .addContainerGap())
        );

        pack();
        setLocationRelativeTo(null);
    }// </editor-fold>//GEN-END:initComponents

    private void sliderStateChanged(javax.swing.event.ChangeEvent evt) {//GEN-FIRST:event_sliderStateChanged
		// Change the text label with respect to slider value
		this.gridSize.setText(this.slider.getValue() + " x " + this.slider.getValue());
		this.numberOfCells = this.slider.getValue();
		initializeGrid();
		updateGrid();
		resetGrid();
//		System.out.println("Map Size: " + this.mapsize);
    }//GEN-LAST:event_sliderStateChanged

    private void jComboBox1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jComboBox1ActionPerformed
		// TODO add your handling code here:
    }//GEN-LAST:event_jComboBox1ActionPerformed

	// Generates Random Grid
    private void jButton2ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton2ActionPerformed
		initializeGrid();
		int randomValue;
		for (int x = 0; x < numberOfCells; x++) {
			randomValue = ThreadLocalRandom.current().nextInt(0, numberOfCells);
			map[x][randomValue].setType(3); // Makes current cell wall
			randomValue = ThreadLocalRandom.current().nextInt(0, numberOfCells);
			map[x][randomValue].setType(3); // Makes current cell wall
		}
		updateGrid();
    }//GEN-LAST:event_jButton2ActionPerformed

    private void jRadioButton_AddStartButtonStateChanged(javax.swing.event.ChangeEvent evt) {//GEN-FIRST:event_jRadioButton_AddStartButtonStateChanged
		// TODO add your handling code here:
    }//GEN-LAST:event_jRadioButton_AddStartButtonStateChanged

    private void jRadioButton_AddStartButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jRadioButton_AddStartButtonActionPerformed
		tool = 0; // Enables START Button
		jRadioButton3_AddWallButton.setSelected(false);
		jRadioButton2_AddFinishButton.setSelected(false);
		jRadioButton3_AddRemoveButton1.setSelected(false);
    }//GEN-LAST:event_jRadioButton_AddStartButtonActionPerformed

    private void jRadioButton2_AddFinishButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jRadioButton2_AddFinishButtonActionPerformed
		tool = 1; // Enables FINISH Button
		jRadioButton3_AddWallButton.setSelected(false);
		jRadioButton_AddStartButton.setSelected(false);
		jRadioButton3_AddRemoveButton1.setSelected(false);
    }//GEN-LAST:event_jRadioButton2_AddFinishButtonActionPerformed

    private void jRadioButton3_AddWallButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jRadioButton3_AddWallButtonActionPerformed
		tool = 3; // Enables WALL Button
		jRadioButton_AddStartButton.setSelected(false);
		jRadioButton2_AddFinishButton.setSelected(false);
		jRadioButton3_AddRemoveButton1.setSelected(false);
    }//GEN-LAST:event_jRadioButton3_AddWallButtonActionPerformed

    private void jRadioButton3_AddRemoveButton1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jRadioButton3_AddRemoveButton1ActionPerformed
		tool = 2; // Enables REMOVE Button
		jRadioButton_AddStartButton.setSelected(false);
		jRadioButton2_AddFinishButton.setSelected(false);
		jRadioButton3_AddWallButton.setSelected(false);
    }//GEN-LAST:event_jRadioButton3_AddRemoveButton1ActionPerformed

    private void jButton1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton1ActionPerformed
		String value = jComboBox1.getSelectedItem().toString();
		if (value == "BFS") {
			currentSelectedAlgorithm = "BFS";
		} else {
			currentSelectedAlgorithm = "DFS";
		}
		if (startX == -1 || startY == -1 || finishX == -1 || finishY == -1) {
			JOptionPane.showMessageDialog(jPanel2, "Please mark your start and finish points on grid!");
		} else {
			// Creates New Thread each time
			RunAlgorithm = new Algorithms();
			RunAlgorithm.start();
		}
    }//GEN-LAST:event_jButton1ActionPerformed

	void hiddenAllButtons(Boolean status) {
		jButton1.setEnabled(status);
		jButton2.setEnabled(status);
		jButton3.setEnabled(status);
		jComboBox1.setEnabled(status);
		slider.setEnabled(status);
		jRadioButton_AddStartButton.setEnabled(status);
		jRadioButton2_AddFinishButton.setEnabled(status);
		jRadioButton3_AddWallButton.setEnabled(status);
		jRadioButton3_AddRemoveButton1.setEnabled(status);
	}

    private void jButton3ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton3ActionPerformed
		resetGrid();
		updateGrid();
    }//GEN-LAST:event_jButton3ActionPerformed

    private void jSlider1StateChanged(javax.swing.event.ChangeEvent evt) {//GEN-FIRST:event_jSlider1StateChanged
		this.gridSize1.setText(this.jSlider1.getValue() + "");
		GLOBAL_DELAY = this.jSlider1.getValue();
    }//GEN-LAST:event_jSlider1StateChanged

	/**
	 * @param args the command line arguments
	 */
	public static void main(String args[]) {
		/* Set the Nimbus look and feel */
		//<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
		/* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
		 */
		try {
			for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
				if ("Nimbus".equals(info.getName())) {
					javax.swing.UIManager.setLookAndFeel(info.getClassName());
					break;
				}
			}
		} catch (ClassNotFoundException ex) {
			java.util.logging.Logger.getLogger(PathFindingVisualizer.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
		} catch (InstantiationException ex) {
			java.util.logging.Logger.getLogger(PathFindingVisualizer.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
		} catch (IllegalAccessException ex) {
			java.util.logging.Logger.getLogger(PathFindingVisualizer.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
		} catch (javax.swing.UnsupportedLookAndFeelException ex) {
			java.util.logging.Logger.getLogger(PathFindingVisualizer.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
		}
		//</editor-fold>
		//</editor-fold>

		/* Create and display the form */
		java.awt.EventQueue.invokeLater(new Runnable() {
			public void run() {
				new PathFindingVisualizer().setVisible(true);
			}
		});
	}

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JLabel gridSize;
    private javax.swing.JLabel gridSize1;
    private javax.swing.JButton jButton1;
    private javax.swing.JButton jButton2;
    private javax.swing.JButton jButton3;
    private javax.swing.JComboBox<String> jComboBox1;
    private javax.swing.JDesktopPane jDesktopPane1;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLayeredPane jLayeredPane1;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JPanel jPanel2;
    private javax.swing.JPanel jPanel3;
    private javax.swing.JPanel jPanel4;
    private javax.swing.JPanel jPanel5;
    private javax.swing.JPanel jPanel6;
    private javax.swing.JPanel jPanel7;
    private javax.swing.JRadioButton jRadioButton2_AddFinishButton;
    private javax.swing.JRadioButton jRadioButton3_AddRemoveButton1;
    private javax.swing.JRadioButton jRadioButton3_AddWallButton;
    private javax.swing.JRadioButton jRadioButton_AddStartButton;
    private javax.swing.JSlider jSlider1;
    private java.awt.Label label1;
    private java.awt.Label label10;
    private java.awt.Label label11;
    private java.awt.Label label2;
    private java.awt.Label label3;
    private java.awt.Label label4;
    private java.awt.Label label5;
    private java.awt.Label label6;
    private java.awt.Label label7;
    private java.awt.Label label8;
    private java.awt.Label label9;
    private javax.swing.JSlider slider;
    // End of variables declaration//GEN-END:variables

	// Map class which maintains user interface of the grid and painting
	class Map extends JPanel implements MouseListener, MouseMotionListener {

		public Map() {
			addMouseListener(this);
			addMouseMotionListener(this);
		}

		/*
			// Colors
			Color wallColor = new Color(117, 59, 2);
			Color startColor = new Color(255, 51, 153);
			Color finishColor = new Color(51, 204, 255);
			Color visitedColor = new Color(187, 242, 78);
			Color finalPathColor = new Color(255, 153, 51);
		
			0-) Start
			1-) Finish (Destination)
			2-) Empty Cell (WHITE)
			3-) Wall (BROWN)
			4-) Visited (Checked)
			5-) Final Path
		 */
		public void paintComponent(Graphics g) {
			super.paintComponent(g);
			for (int x = 0; x < numberOfCells; x++) {
				for (int y = 0; y < numberOfCells; y++) {
					switch (map[x][y].getType()) {
						case 0:
							g.setColor(startColor);
							break;
						case 1:
							g.setColor(finishColor);
							break;
						case 2:
							g.setColor(Color.WHITE);
							break;
						case 3:
							g.setColor(wallColor);
							break;
						case 4:
							g.setColor(visitedColor);
							break;
						case 5:
							g.setColor(finalPathColor);
							break;
					}
					g.fillRect(x * CELLSIZE, y * CELLSIZE, CELLSIZE, CELLSIZE);
					g.setColor(Color.BLACK);
					g.drawRect(x * CELLSIZE, y * CELLSIZE, CELLSIZE, CELLSIZE);
				}
			}
		}

		@Override
		public void mouseDragged(MouseEvent e) {
			if (searching) {
				return;
			}
			try {
				int x = e.getX() / CELLSIZE;
				int y = e.getY() / CELLSIZE;
				Cell currentCell = map[x][y];
				if ((tool == 2 || tool == 3) && (currentCell.getType() != 0 && currentCell.getType() != 1)) {
					currentCell.setType(tool);
				}
				updateGrid();
			} catch (Exception z) {
			}
		}

		@Override
		public void mouseClicked(MouseEvent e) {
		}

		@Override
		public void mousePressed(MouseEvent e) {
			if (searching) {
				return;
			}
			try {
				int x = e.getX() / CELLSIZE;
				int y = e.getY() / CELLSIZE;
				Cell current = map[x][y];
				switch (tool) {
					// Start Point
					case 0: {
						// If not wall and finish
						if (current.getType() != 3 && current.getType() != 1) {
							if (startX > -1 && startY > -1) {
								// Remove previous start point
								map[startX][startY].setType(2);
							}
							startX = x;
							startY = y;
							current.setType(tool);
						}
						break;
					}
					// Finish Point
					case 1: {
						// If not wall and start
						if (current.getType() != 3 && current.getType() != 0) {
							if (finishX > -1 && finishY > -1) {
								// Remove previous finish point
								map[finishX][finishY].setType(2);
							}
							finishX = x;
							finishY = y;
							current.setType(tool);
						}
						break;
					}
					default:
						if (current.getType() != 0 && current.getType() != 1) {
							current.setType(tool);
						}
						break;
				}
				updateGrid();
			} catch (Exception z) {
			}
		}

		@Override
		public void mouseMoved(MouseEvent e) {
		}

		@Override
		public void mouseEntered(MouseEvent e) {
		}

		@Override
		public void mouseExited(MouseEvent e) {
		}

		@Override
		public void mouseReleased(MouseEvent e) {
		}
	}

	// THIS CLASS IS USING CONCURRENCY by THREADS
	// Algorithms class which contains "Breadth-First Search (BFS)" and "Depth-First Search(DFS)" pathfinding algorithms
	class Algorithms extends Thread {
		public void BreadthFirstSearch() {
			Queue<Cell> queue = new LinkedList<>();
			Cell startCell = map[startX][startY];
			queue.add(startCell);
//			System.out.println("Starting cell: " + startCell.getType());
			while (queue.size() > 0) {
				Cell currentCell = queue.poll();
				// search for 8 neighbors
				for (int i = 0; i < directions.length; i++) {
					int nx = currentCell.getX() + directions[i].first;
					int ny = currentCell.getY() + directions[i].second;
					if (nx == finishX && ny == finishY) {
						updateGrid();
						extractingFinalPath(currentCell.getX(), currentCell.getY());
						updateGrid();
						return;
					}
					// Reached Finish Point
					// If cell is inside of map and empty
					if (inside(nx, ny) && map[nx][ny].getType() == 2) {
						queue.add(new Cell(4, nx, ny));
						map[nx][ny].setType(4); // Mark as visited
						// Save where we came from
						map[nx][ny].previousX = currentCell.getX();
						map[nx][ny].previousY = currentCell.getY();
						// Put delay
						delay();
					}
					updateGrid();
				}
			}
			updateGrid();
		}

		public void DepthFirstSearch() {
			Stack<Cell> stack = new Stack<Cell>();
			Cell startCell = map[startX][startY];
			stack.add(startCell);
			while (stack.size() > 0) {
				Cell currentCell = stack.pop();
				// search for 8 neighbors
				for (int i = 0; i < directions.length; i++) {
					int nx = currentCell.getX() + directions[i].first;
					int ny = currentCell.getY() + directions[i].second;
					// Reached Finish Point
					if (nx == finishX && ny == finishY) {
						updateGrid();
						extractingFinalPath(currentCell.getX(), currentCell.getY());
						updateGrid();
						return;
					}
					// If cell is inside of map and empty
					if (inside(nx, ny) && map[nx][ny].getType() == 2) {
						stack.add(new Cell(4, nx, ny));
						map[nx][ny].setType(4); // Mark as visited
						// Save where we came from
						map[nx][ny].previousX = currentCell.getX();
						map[nx][ny].previousY = currentCell.getY();
						// Put delay
						delay();
					}
					updateGrid();
				}
			}
			updateGrid();
		}

		public void extractingFinalPath(int nx, int ny) {
			int tempX, tempY;
			while (!(nx == startX && ny == startY)) {
				map[nx][ny].setType(5); // Mark as final path color, Paint ORANGE!
				tempX = map[nx][ny].previousX;
				tempY = map[nx][ny].previousY;
				nx = tempX;
				ny = tempY;
				delay();
				updateGrid();
			}
			updateGrid();
		}

		public boolean inside(int x, int y) {
			if (x < 0 || x >= map.length || y < 0 || y >= map.length) {
				return false;
			}
			return true;
		}

		// CONCURRENCY
		@Override
		public void run() {
			searching = true;
			hiddenAllButtons(!searching);
			if (currentSelectedAlgorithm == "BFS") {
				RunAlgorithm.BreadthFirstSearch();
			} else {
				RunAlgorithm.DepthFirstSearch();
			}
			searching = false;
			hiddenAllButtons(!searching);
		}
	}

	// Puts some delay for algorithms
	public void delay() {
		try {
			Thread.sleep(GLOBAL_DELAY);
		} catch (Exception e) {
		}
	}

	// Cell class
	class Cell {

		int x;
		int y;
		int previousX; // Last visited numberOfCells to backtracking final path
		int previousY;
		int type;

		/*	Cell Types:
				0-) Start
				1-) Finish (Destination)
				2-) Empty Cell (WHITE)
				3-) Wall (BROWN)
				4-) Visited (Checked)
				5-) Final Path
		 */
		// Constructor
		public Cell(int type, int x, int y) {
			this.type = type;
			this.x = x;
			this.y = y;
		}

		public int getX() {
			return x;
		}

		public int getY() {
			return y;
		}

		public int getPreviousX() {
			return previousX;
		}

		public int getPreviousY() {
			return previousY;
		}

		public int getType() {
			return type;
		}

		public void setX(int x) {
			this.x = x;
		}

		public void setY(int y) {
			this.y = y;
		}

		public void setPreviousX(int previousX) {
			this.previousX = previousX;
		}

		public void setPreviousy(int previousY) {
			this.previousY = previousY;
		}

		public void setType(int type) {
			this.type = type;
		}
	}

	// Pair Class
	class Pair {
		public int first;
		public int second;
		Pair(int a, int b) {
			this.first = a;
			this.second = b;
		}
	}
}